name: CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs: 
  backend:
      name: Backend CI (Django)
      runs-on: ubuntu-latest

      services:
        postgres:
          image: postgres:15
          env:
            POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
            POSTGRES_USER: ${{ secrets.DATABASE_USER }}
            POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            POSTGRES_HOST: postgres
            POSTGRES_PORT: 5432
          ports: ['5432:5432']
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
      
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up Python
          uses: actions/setup-python@v5

        - name: Install dependancies
          run: |
            cd backend
            python -m pip install --upgrade pip
            pip install -r requirements-dev.txt



        - name: Run Bandit (security static code analysis)
          run: |
            cd backend
            bandit -r vault

        - name: Run Flake8 (formatting linter)
          run: |
            cd backend
            flake8 vaultapi --exclude=migrations,__pycache__,templates \
                            --extend-ignore=E127,E128,E501

        - name: Run Security (Vulnerability testing)
          uses: pyupio/safety-action@v1
          with:
            api-key: ${{ secrets.SAFETY_API_KEY }}


        - name: Run Django Tests
          env:
            DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_USER: ${{ secrets.DATABASE_USER }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
            DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
            FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
            PGUSER: ${{ secrets.PGUSER }}
            PGPASSWORD: ${{ secrets.PGPASSWORD }}
            DATABASE_URL: ${{ secrets.DATABASE_URL }}
            DJANGO_SETTINGS_MODULE: vault.test_settings
            POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
            POSTGRES_USER: ${{ secrets.DATABASE_USER }}
            POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            POSTGRES_HOST: postgres
            POSTGRES_PORT: 5432
          run: |
            cd backend
            python manage.py migrate
            python manage.py test

  frontend:
    name: Frontend CI (React)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependancies
        run: |
          cd frontend
          npm install

      # - name: Run Semgrep
      #   uses: returntocorp/semgrep-action@v1
      #   with:
      #     config: "p/javascript"
          
      - name: Run ESLint with security rules (Formatting and security)
        run: |
          cd frontend
          npm run lint src

      - name: Run Prettier (Formatting)
        run: |
          cd frontend
          npx prettier . --check

      - name: Run npm audit (Dependancy vulnerability Scanning)
        run: |
          cd frontend
          npm audit --audit-level=high

      - name: Run Retire.js (JS library vulnerability detection)
        run: |
          npm install -g retire
          cd frontend
          retire --exitwith 13


  mobile:
    name: Mobile CI (React Native)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd mobile
          npm install

      - name: Run ESLint with security rules (Formatting and security)
        run: |
          cd mobile
          npx eslint .

      # - name: Run Semgrep
      #   uses: returntocorp/semgrep-action@v1
      #   with:
      #     config: "p/javascript"

      - name: Run npm audit (Dependancy vulnerability Scanning)
        run: |
          cd mobile
          npm audit --audit-level=high

      - name: Run Retire.js (JS library vulnerability detection)
        run: |
          npm install -g retire
          cd mobile
          retire --exitwith 13

      # - name: Run Jest Tests
      #   run: |
      #     cd mobile
      #     npm test

  deployBackend:
      name: Backend CD (Django)
      needs: backend
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Install backend dependancies
          working-directory: ./backend
          run: |
            python -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt

                

        - name: Deploy backend to Render
          uses: JorgeLNJunior/render-deploy@v1.4.5
          with:
            service_id: ${{ secrets.RENDER_SERVICE_ID }}
            api_key: ${{ secrets.RENDER_API_KEY }}
            clear_cache: true
            deployment_environment: 'production'
            github_token: ${{ secrets.GITHUB_TOKEN }}

  # deployFrontend:
  #     name: Deploy React frontend
  #     needs: frontend
  #     runs-on: ubuntu-latest

  #     steps: 
  #       - name: Checkout
  #         uses: actions/checkout@v1

  #       - name: Build frontend
  #         run: |
  #           cd frontend
  #           npm install
  #           npm run vite build

  #       - name: Deploy frontend to Netlify
  #         uses: danakim/gh-action-deploy-netlify@master
  #         with:
  #           AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  #           SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  #           DEPLOY_PROD: true